<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lxh.fushoujia.mapper.BudgetMapper">

    <resultMap id="projectBudget" type="Budget">
        <id column="id" jdbcType="INTEGER" property="id"></id>
        <result column="expectedIncome" jdbcType="DECIMAL" property="expectedIncome" />
        <result column="tenderCost" jdbcType="DECIMAL" property="tenderCost" />
        <result column="grossProfit" jdbcType="DECIMAL" property="grossProfit" />
        <result column="netProfit" jdbcType="DECIMAL" property="netProfit" />
        <result column="status" jdbcType="VARCHAR" property="status" />
        <result column="accounting" jdbcType="BOOLEAN" property="accounting" />

        <association property="project" javaType="Project">
            <id column="pid" jdbcType="INTEGER" property="id" />
            <id column="name" jdbcType="VARCHAR" property="name" />
            <id column="client" jdbcType="VARCHAR" property="client" />
        </association>
    </resultMap>

    <select id="listBudgetByApproval" resultMap="projectBudget">
        select
        b.id as id,
        b.expectedIncome,
        b.tenderCost,
        b.grossProfit,
        b.netProfit,
        b.status,
        p.id as pid,
        p.name,
        p.client,
        b.accounting
        from budget b left join project p on b.projectId = p.id
        where b.status = 'toReview' and p.status != 'invalid' and p.isDelete = false;
    </select>

    <select id="listBudget" resultMap="projectBudget" parameterType="Page">
        select
              b.id as id,
              b.expectedIncome,
              b.tenderCost,
              b.grossProfit,
              b.netProfit,
              b.status,
              p.id as pid,
              p.name,
              p.client,
              b.accounting
        from budget b left join project p on b.projectId = p.id
        <where>
            <if test=" searchKey != null">
              p.name like concat('%', #{searchKey}, '%') or p.client like concat('%', #{searchKey}, '%')
            </if>
            and p.isDelete = false and p.status != 'invalid' and b.accounting = false
        </where>
        limit #{start}, #{count};
    </select>

    <select id="getTotal" parameterType="Page" resultType="Integer">
        select
          count(*)
        from budget b left join project p on b.projectId = p.id
        <where>
            <if test=" searchKey != null">
                p.name like concat('%', #{searchKey}, '%') or p.client like concat('%', #{searchKey}, '%')
            </if>
            and p.isDelete = false and p.status != 'invalid' and b.accounting = false
        </where>
    </select>

    <select id="getBudget" resultType="Budget" parameterType="int">
        select * from budget where projectId = #{id} and accounting != true;
    </select>

    <select id="getBudgetByTrue" resultType="Budget" parameterType="int">
        select * from budget where projectId = #{id} and accounting = true;
    </select>

    <select id="getBudgetRemark" resultType="BudgetRemark" parameterType="int">
        select * from budget_remark where budgetId = #{budgetId} limit 0, 1;
    </select>

    <insert id="addBudget" parameterType="Budget" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
        insert into budget
            (expectedIncome, tenderCost, netIncome, outCost, publicCost, humanCost, serveCost, travelCost, otherCost, allCost, vat, grossProfit, incomeTax, netProfit, taxRate, status, createDate, updateDate, projectId, accounting, sunk)
            values (#{expectedIncome}, #{tenderCost}, #{netIncome}, #{outCost}, #{publicCost}, #{humanCost}, #{serveCost}, #{travelCost}, #{otherCost}, #{allCost}, #{vat}, #{grossProfit}, #{incomeTax}, #{netProfit}, #{taxRate}, #{status}, now(), now(), #{projectId}, #{accounting}, #{sunk});
    </insert>

    <insert id="addBudgetRemark" parameterType="BudgetRemark" keyColumn="id" useGeneratedKeys="true" keyProperty="id">
        insert into budget_remark
            (expectedIncome, tenderCost, netIncome, outCost, publicCost, humanCost, serveCost, travelCost, otherCost, allCost, vat, grossProfit, incomeTax, netProfit, createDate, updateDate, budgetId)
            values (#{expectedIncome}, #{tenderCost}, #{netIncome}, #{outCost}, #{publicCost}, #{humanCost}, #{serveCost}, #{travelCost}, #{otherCost}, #{allCost}, #{vat}, #{grossProfit}, #{incomeTax}, #{netProfit}, now(), now(), #{budgetId});
    </insert>

    <update id="updateBudget" parameterType="Budget">
        update budget
        <set>
            <if test="expectedIncome != null ">
                expectedIncome = #{expectedIncome},
            </if>
            <if test="tenderCost != null ">
                tenderCost = #{tenderCost},
            </if>
            <if test="netIncome != null ">
                netIncome = #{netIncome},
            </if>
            <if test="outCost != null ">
                outCost = #{outCost},
            </if>
            <if test="publicCost != null ">
                publicCost = #{publicCost},
            </if>
            <if test="humanCost != null ">
                humanCost = #{humanCost},
            </if>
            <if test="serveCost != null ">
                serveCost = #{serveCost},
            </if>
            <if test="travelCost != null ">
                travelCost = #{travelCost},
            </if>
            <if test="otherCost != null ">
                otherCost = #{otherCost},
            </if>
            <if test="allCost != null ">
                allCost = #{allCost},
            </if>
            <if test="vat != null ">
                vat = #{vat},
            </if>
            <if test="grossProfit != null ">
                grossProfit = #{grossProfit},
            </if>
            <if test="incomeTax != null ">
                incomeTax = #{incomeTax},
            </if>
            <if test="netProfit != null ">
                netProfit = #{netProfit},
            </if>
            <if test="taxRate != null ">
                taxRate = #{taxRate},
            </if>
            <if test="status != null ">
                status = #{status},
            </if>
            updateDate = now()
        </set>
        where id = #{id}
    </update>

    <update id="updateBudgetRemark" parameterType="BudgetRemark">
        update budget_remark
        <set>
            <if test="expectedIncome != null ">
                expectedIncome = #{expectedIncome},
            </if>
            <if test="tenderCost != null ">
                tenderCost = #{tenderCost},
            </if>
            <if test="netIncome != null ">
                netIncome = #{netIncome},
            </if>
            <if test="outCost != null ">
                outCost = #{outCost},
            </if>
            <if test="publicCost != null ">
                publicCost = #{publicCost},
            </if>
            <if test="humanCost != null ">
                humanCost = #{humanCost},
            </if>
            <if test="serveCost != null ">
                serveCost = #{serveCost},
            </if>
            <if test="travelCost != null ">
                travelCost = #{travelCost},
            </if>
            <if test="otherCost != null ">
                otherCost = #{otherCost},
            </if>
            <if test="allCost != null ">
                allCost = #{allCost},
            </if>
            <if test="vat != null ">
                vat = #{vat},
            </if>
            <if test="grossProfit != null ">
                grossProfit = #{grossProfit},
            </if>
            <if test="incomeTax != null ">
                incomeTax = #{incomeTax},
            </if>
            <if test="netProfit != null ">
                netProfit = #{netProfit},
            </if>
            updateDate = now()
        </set>
        where id = #{id}
    </update>

</mapper>